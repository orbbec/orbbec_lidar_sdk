#include "./utils.hpp"
namespace ob_lidar_driver {
std::string commandIDToString(uint16_t command_id) {
    switch (command_id) {
        case SET_IP_ADDR:
            return "SET_IP_ADDR";
        case SET_PORT:
            return "SET_PORT";
        case SET_MAC_ADDR:
            return "SET_MAC_ADDR";
        case SET_SUBNET_MASK:
            return "SET_SUBNET_MASK";
        case SET_SCAN_SPEED:
            return "SET_SCAN_SPEED";
        case SET_SCAN_DIRECTION:
            return "SET_SCAN_DIRECTION";
        case SET_TRANSFER_PROTOCOL:
            return "SET_TRANSFER_PROTOCOL";
        case SET_WORK_MODE:
            return "SET_WORK_MODE";
        case SET_INITIATE_DEVICE_CONNECTION:
            return "SET_INITIATE_DEVICE_CONNECTION";
        case SET_SERIAL_NUMBER:
            return "SET_SERIAL_NUMBER";
        case REBOOT_DEVICE:
            return "REBOOT_DEVICE";
        case ENTER_FACTORY_MODE:
            return "ENTER_FACTORY_MODE";
        case SET_ECHO_MODE:
            return "SET_ECHO_MODE";
        case APPLY_CONFIGS:
            return "APPLY_CONFIGS";
        case ENABLE_STREAMING:
            return "ENABLE_STREAMING";
        case SET_FILTER_LEVEL:
            return "SET_FILTER_LEVEL";
        case START_MCU_UPGRADE:
            return "START_MCU_UPGRADE";
        case END_MCU_UPGRADE:
            return "END_MCU_UPGRADE";
        case PROJECT_ID_VERIFICATION:
            return "PROJECT_ID_VERIFICATION";
        case PRODUCT_ID_VERIFICATION:
            return "PRODUCT_ID_VERIFICATION";
        case SEND_MD5_VALUE:
            return "SEND_MD5_VALUE";
        case VERIFY_MD5_VALUE:
            return "VERIFY_MD5_VALUE";
        case TRANSFER_FIRMWARE_UPGRADE_PACKAGE:
            return "TRANSFER_FIRMWARE_UPGRADE_PACKAGE";
        case START_FPGA_UPGRADE:
            return "START_FPGA_UPGRADE";
        case END_FPGA_UPGRADE:
            return "END_FPGA_UPGRADE";
        case TRANSFER_FPGA_UPGRADE_PACKAGE:
            return "TRANSFER_FPGA_UPGRADE_PACKAGE";
        case START_MEMS_UPGRADE:
            return "START_MEMS_UPGRADE";
        case END_MEMS_UPGRADE:
            return "END_MEMS_UPGRADE";
        case MEMS_ID_VERIFICATION:
            return "MEMS_ID_VERIFICATION";
        case SEND_MEMS_MD5_VALUE:
            return "SEND_MEMS_MD5_VALUE";
        case VERIFY_MEMS_MD5_VALUE:
            return "VERIFY_MEMS_MD5_VALUE";
        case TRANSFER_MEMS_UPGRADE_PACKAGE:
            return "TRANSFER_MEMS_UPGRADE_PACKAGE";
        case GET_IP_ADDR:
            return "GET_IP_ADDR";
        case GET_PORT:
            return "GET_PORT";
        case GET_MAC_ADDR:
            return "GET_MAC_ADDR";
        case GET_SUBNET_MASK:
            return "GET_SUBNET_MASK";
        case GET_SCAN_SPEED:
            return "GET_SCAN_SPEED";
        case GET_SCAN_DIRECTION:
            return "GET_SCAN_DIRECTION";
        case GET_TRANSFER_PROTOCOL:
            return "GET_TRANSFER_PROTOCOL";
        case GET_WORK_MODE:
            return "GET_WORK_MODE";
        case GET_SERIAL_NUMBER:
            return "GET_SERIAL_NUMBER";
        case GET_PRODUCT_MODEL:
            return "GET_PRODUCT_MODEL";
        case GET_FIRMWARE_VERSION:
            return "GET_FIRMWARE_VERSION";
        case GET_FPGA_VERSION:
            return "GET_FPGA_VERSION";
        case GET_STATUS_INFO:
            return "GET_STATUS_INFO";
        case GET_WARNING_INFO:
            return "GET_WARNING_INFO";
        case GET_ECHO_MODE:
            return "GET_ECHO_MODE";
        case GET_SPIN_SPEED:
            return "GET_SPIN_SPEED";
        case GET_MCU_TEMPERATURE:
            return "GET_MCU_TEMPERATURE";
        case GET_FPGA_TEMPERATURE:
            return "GET_FPGA_TEMPERATURE";
        case GET_FPGA_VERSION_DATE:
            return "GET_FPGA_VERSION_DATE";
        case GET_HIGH_VOLTAGE:
            return "GET_HIGH_VOLTAGE";
        case GET_APD_TEMPERATURE:
            return "GET_APD_TEMPERATURE";
        case GET_TX_VOLTAGE:
            return "GET_TX_VOLTAGE";
        case GET_FILTER_LEVEL:
            return "GET_FILTER_LEVEL";
        default:
            return "UNKNOWN";
    }
}
}  // namespace ob_lidar_driver
